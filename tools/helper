#!/usr/bin/env python3

"""Utility that helps with extension building and testing."""

import argparse
import glob
import logging
import os
import subprocess
import sys
from datetime import datetime


def run(cmd: str) -> subprocess.CompletedProcess[bytes]:
    """Helper to easy calling subprocess."""
    return subprocess.run(cmd, shell=True, check=True)


def get_tags(cmd: str) -> subprocess.CompletedProcess[str]:
    """Get tags for the user using git commands."""
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            check=True,
            text=True,
        )
    except subprocess.CalledProcessError as e:
        logging.warning("This repository is missing tags. Fetch tags from upstream repository.")
        logging.error(e)
        logging.error(e.output)
        result = subprocess.CompletedProcess(
            "",
            0,
            f"v{datetime.now().strftime('%y')}.{datetime.now().month}.1-1-no_tags",
            None,
        )
    return result


def cli() -> None:
    """Main."""
    parser = argparse.ArgumentParser(prog="helper", description="Build process helper")
    parser.add_argument(
        "--version",
        action="store_true",
        help="Retrieve marketplace compatible version number to be used during build.",
    )
    parser.add_argument(
        "--publish",
        action="store_true",
        help="Publish already built vsix file to marketplaces.",
    )
    parser.add_argument("--package", action="store_true", help="Package the extension.")

    opt, _ = parser.parse_known_args()
    logging.basicConfig(level=logging.INFO, format="%(message)s")

    pre_release = False
    result = get_tags('git describe --dirty --tags --long --match "v*.*"')
    git_tag = result.stdout.rstrip()
    logging.debug('git describe (with --match "v*.*") returned: %s', git_tag)
    tag, commits_since, suffix = git_tag.split("-", 2)
    version = tag[1:]
    version_info = [int(x) for x in version.split(".")]
    if "-dirty" in suffix or commits_since != "0":
        pre_release = True
        # If pre_release = True, we need to calculate the time difference from the
        # first stable release of the month with a "*.0" tag
        result = get_tags('git describe --dirty --tags --long --match "v*.*.0"')
        git_tag = result.stdout.rstrip()
        logging.debug('git describe (with --match "v*.*.0") returned: %s', git_tag)
        tag, commits_since, suffix = git_tag.split("-", 2)
        version = tag[1:]
        version_info = [int(x) for x in version.split(".")]

        if len(version_info) == 2:
            version_info.append(0)
        if len(version_info) != 3:
            msg = (
                f"Unsupported version tag ({version}) found, we only support MINOR.MAJOR.PATCH"
                " pattern."
            )
            logging.error(msg)
            sys.exit(2)
        try:
            last_tag_timestamp = int(
                subprocess.run(
                    f"git -P log -1 --format=%ct {tag}",
                    shell=True,
                    capture_output=True,
                    check=True,
                    text=True,
                ).stdout.rstrip()
            )
            last_commit_timestamp = int(
                subprocess.run(
                    "git -P show --no-patch --format=%ct HEAD",
                    shell=True,
                    capture_output=True,
                    check=True,
                    text=True,
                ).stdout.rstrip()
            )
        except subprocess.CalledProcessError as e:
            logging.error(e)
            logging.error(e.output)
            last_tag_timestamp = 1721335286
            last_commit_timestamp = 1722605520
        version_info[2] = last_commit_timestamp - last_tag_timestamp
    version = ".".join([str(x) for x in version_info])
    logging.info(
        "Determined version=%s and pre_release=%s base on git describe result: %s",
        version,
        pre_release,
        git_tag,
    )

    if opt.version:
        print(version)
        sys.exit(0)
    pre_release_arg = "--pre-release" if pre_release else ""
    if opt.publish:
        vsix_files = glob.glob("*.vsix")
        if len(vsix_files) != 1:
            msg = (
                "Publish command requires presence of exactly one '.vsix' on disk, found:"
                f" {vsix_files}"
            )
            logging.error(msg)
            sys.exit(2)
        run(
            f"npm exec -- vsce publish {pre_release_arg} --skip-duplicate --packagePath"
            f" {vsix_files[0]} --readme-path docs/README.md"
        )
        run(f"npm exec -- ovsx publish {pre_release_arg} --skip-duplicate {vsix_files[0]}")
        sys.exit()
    if opt.package:
        run("rm -f ./*.vsix")
        run("npm exec -- yarn run webpack")
        # --no-dependencies and --no-yarn needed due to https://github.com/microsoft/vscode-vsce/issues/439
        run("npm exec -- yarn run vite-build")

        run(
            "npm exec -- vsce package --no-dependencies --no-git-tag-version"
            f" --no-update-package-json --readme-path docs/README.md {pre_release_arg} {version}"
        )
        # Using zipinfo instead of `npm exec -- vsce ls` due to https://github.com/microsoft/vscode-vsce/issues/517
        run("mkdir -p out/log")
        run("zipinfo -1 ./*.vsix > out/log/package.log")
        run("tools/dirty.sh")
        vsix_file = f"ansible-{version}.vsix"
        size = os.path.getsize(vsix_file) / 1024 / 1024
        vsx_size_limit_mb = 6.2
        print(f"Generated ansible-{vsix_file} of size {size:.2f} MB")
        if size > vsx_size_limit_mb:
            msg = f"The generated vsix file is {size:.2f} MB, larger than {vsx_size_limit_mb} MB limit, this would required extensive review to see if we didn't accidentally include any essential files."
            logging.error(msg)
            sys.exit(2)


if __name__ == "__main__":
    cli()
