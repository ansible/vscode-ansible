# cspell:ignore oidc
name: ci

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  merge_group:
    branches: ["main", "devel/*"]
  push:
    branches: ["main", "devel/*"]
    tags:
      - "v*.*"
  pull_request:
    # 'closed' is missing to avoid double triggering on PR merge
    # 'edited' is missing to allow us to edit PR title/description without triggering
    types: [synchronize, opened, reopened]
    branches: ["main", "devel/*"]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish a pre-release"
        required: false
        default: "false"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.ref }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1" # make mocha output colorful
  PRETTIER_LEGACY_CLI: "1" # https://github.com/prettier/prettier/issues/15832
  # https://docs.github.com/en/actions/learn-github-actions/environment-variables
  # https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/
  WSLENV: HOSTNAME:CI:FORCE_COLOR:GITHUB_ACTION:GITHUB_ACTION_PATH/p:GITHUB_ACTION_REPOSITORY:GITHUB_WORKFLOW:GITHUB_WORKSPACE/p:GITHUB_PATH/p:GITHUB_ENV/p:VIRTUAL_ENV/p:SKIP_PODMAN:SKIP_DOCKER:NODE_OPTIONS
  # We define a hostname because otherwise the variable might not always be accessible on runners.
  HOSTNAME: gha

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: ${{ matrix.name }}
    environment: ci
    env:
      SKIP_DOCKER: ${{ matrix.env.SKIP_DOCKER || 0 }}
      SKIP_PODMAN: ${{ matrix.env.SKIP_PODMAN || 0 }}
      # NODE_OPTIONS must be kept in sync with one inside .env file
      NODE_OPTIONS: --max-old-space-size=8192
      TASKFILE_ARGS: --output=group --output-group-begin='::group::{{.TASK}}' --output-group-end='::endgroup::'

    defaults:
      run:
        shell: ${{ matrix.shell || 'bash'}}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os || 'ubuntu-24.04' }}
    # see https://github.com/containers/podman/issues/13609
    continue-on-error: ${{ contains(matrix.name, 'macos') && true || false }}
    outputs:
      can_release_to_npm: ${{ steps.package.outputs.can_release_to_npm }}
    permissions:
      contents: read
      id-token: write # codecov actions
      checks: read # codecov actions
    strategy:
      fail-fast: false
      matrix:
        # Avoid letting github do the matrix multiplication and use manual
        # includes for each job, this gives us fine control over job name.
        # Order is important, keep it alphabetical: docs, lint, test*
        continue-on-error:
          - false
        os:
          - ubuntu-24.04
        task-name:
          - docs
        name:
          - docs
        include:
          - name: lint
            task-name: lint
            os: ubuntu-24.04
            env:
              SKIP_PODMAN: 1
              SKIP_DOCKER: 1

          - name: test (linux)
            task-name: test

          - name: test (macos)
            task-name: test
            os: macos-13-large
            env:
              SKIP_PODMAN: 1
              SKIP_DOCKER: 1
            # only until we fix some broken tests, as we need it to pass
            # in order to enable the caching
            continue-on-error: true

          - name: test (wsl)
            task-name: test
            os: wsl-runner
            runs-on: self-hosted
            env:
              SKIP_PODMAN: 1
              SKIP_DOCKER: 1
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # we need tags for dynamic versioning
          show-progress: false

      # https://github.com/marketplace/actions/setup-wsl
      - name: Activate WSL
        if: contains(matrix.shell, 'wsl')
        uses: Vampire/setup-wsl@v5.0.1
        with:
          distribution: Ubuntu-24.04
          set-as-default: "true"
          # '-i' seems to be the only option that loads .bashrc file that we need
          # https://github.com/Vampire/setup-wsl/discussions/54
          wsl-shell-command: "bash -i -eo pipefail"
          # https://github.com/MicrosoftDocs/WSL/blob/main/WSL/wsl-config.md#L159
          wsl-conf: |
            [automount]
            enabled = true
            root = /
            options = "metadata,umask=077"
            [boot]
            command=/etc/init.d/dbus start
            [interop]
            enabled = false
            appendWindowsPath = false
            [network]
            hostname = wsl
          additional-packages: curl
            dbus
            dirmngr
            gawk
            gcc
            git
            gpg
            gpg-agent
            jq
            make
            python3-dev
            python3-full
            python3-venv
            qemu-user-static
            tar
            unzip
            xvfb
          # asdf nodejs plugin requires: dirmngr gpg curl gawk

      - name: Setup node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: 20
          # yarn cache is broken due https://github.com/actions/setup-node/issues/531
          # cache: yarn

      - name: Corepack enable
        run: corepack enable

      - name: Enable caching
        uses: actions/cache@v4
        with:
          path: |
            .vscode-test
            .yarn/cache
            node_modules/.cache/webpack
            out/ext
            out/test-resources
            out/test-resources-oldest
            ~/.cache/pip
            ~/.cache/yarn
          key: ${{ runner.os }}-${{ matrix.task-name }}-${{ hashFiles('package.json', 'yarn.lock', '.config/requirements.txt', 'tools/*.*') }}

      # - name: Enable caching for podman-machine
      #   if: "contains(matrix.os, 'macos')"
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.local/share/containers
      #       ~/.config/containers
      #     key: ${{ runner.os }}-${{ matrix.task-name }}-${{ hashFiles('package.json', 'yarn.lock', '.config/requirements.txt', '**/Taskfile.yml', 'tools/*.*') }}

      - name: Setup task
        uses: arduino/setup-task@v2
        with:
          version: 3.37.2

      - name: Setup direnv
        uses: HatsuneMiku3939/direnv-action@v1.1.0
        with:
          direnvVersion: 2.36.0

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Enable caching for pre-commit
        if: ${{ matrix.name == 'lint' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install ansible-dev-tools (pip for Linux/macOS, pipx for WSL)
        run: |
          if [[ "${{ matrix.name }}" == *"wsl"* ]]; then
            pipx install ansible-dev-tools
          else
            pip install ansible-dev-tools
          fi

      - name: Activate direnv
        run: |
          direnv allow
          direnv reload

          # https://github.com/direnv/direnv/wiki/GitHubActions
          # Github prevents export of NODE_OPTIONS to GITHUB_ENV due to security reasons:
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#setting-an-environment-variable
          direnv export gha >> "$GITHUB_ENV"
          direnv exec . bash -c 'echo "${VIRTUAL_ENV}/bin"' >> "$GITHUB_PATH"

      - name: Ensure .env file is automatically loaded (direnv)
        run: |
          set -ex
          test "${VIRTUAL_ENV:-}" = "${HOME}/.local/share/virtualenvs/vsa" || {
            echo "VIRTUAL_ENV mismatch"
            exit 99
          }
          test "$(which python3)" = "${HOME}/.local/share/virtualenvs/vsa/bin/python3" || {
            echo "python3 mismatch"
            exit 98
          }
          # Ensure NODE_OPTIONS config on CI is identical with the one in .env
          [[ "${NODE_OPTIONS:-}" == "$(direnv exec . printenv NODE_OPTIONS)" ]] || { echo "NODE_OPTIONS mismatch between .env and ci.yaml"; exit 97; }

      - name: Install dependencies
        uses: backstage/actions/yarn-install@b3c1841fd69e1658ac631afafd0fb140a2309024 # v0.6.17
        with:
          cache-prefix: ${{ runner.os }}-v${{ matrix.node-version }}

      - name: task setup
        # starting podman machine can randomly get stuck on macos
        timeout-minutes: 25
        run: task setup

      ## uncomment to debug on GHA runner
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: task package
        id: package
        run: |
          task package ${{ matrix.env.TASKFILE_ARGS }}

      - name: configure podman
        if: ${{ matrix.name == 'test (linux)' }}
        run: |
          sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0
          mkdir -p ~/.config/containers
          cat <<EOT >> ~/.config/containers/containers.conf
          [engine]
          cgroup_manager="cgroupfs"
          EOT
          podman info

      - name: task ${{ matrix.task-name }}
        if: "${{ !contains(matrix.name, 'test') }}"
        run: task ${{ matrix.task-name }} ${{ matrix.env.TASKFILE_ARGS }}

      - name: task unit
        if: contains(matrix.name, 'test')
        run: task unit ${{ matrix.env.TASKFILE_ARGS }}

      - name: task ui
        # https://github.com/ansible/vscode-ansible/issues/1451
        if: "${{ contains(matrix.name, 'test') && !contains(matrix.name, 'wsl') }}"
        run: task ui ${{ matrix.env.TASKFILE_ARGS }}

      - name: task e2e
        # https://github.com/ansible/vscode-ansible/issues/1451
        if: "${{ contains(matrix.name, 'test') }}"
        run: task e2e ${{ matrix.env.TASKFILE_ARGS }}

      - name: task als
        # https://github.com/ansible/vscode-ansible/issues/1451
        if: contains(matrix.name, 'test')
        run: task als ${{ matrix.env.TASKFILE_ARGS }}

      - name: Upload vsix artifact
        if: ${{ matrix.name == 'test (linux)' }}
        uses: actions/upload-artifact@v4
        with:
          # Do not use github.ref_name as it contains slashes and we cannot sanitize it
          name: ansible-extension-build-${{ github.event.number || github.run_id }}.zip
          path: ansible-*.vsix
          if-no-files-found: error
          retention-days: 90

      - name: Upload ansible-language-server npm package
        if: ${{ matrix.name == 'test (linux)' }}
        uses: actions/upload-artifact@v4
        with:
          # Do not use github.ref_name as it contains slashes and we cannot sanitize it
          name: "@ansible-ansible-language-server-build-${{ github.event.number || github.run_id }}.tgz"
          path: packages/ansible-language-server/*.tgz
          if-no-files-found: error
          retention-days: 90

      - name: Remove invalid files
        if: ${{ always() }}
        run: |
          find out -name '*\?*' -exec rm -r {} \; || true
          find out -name '*"*' -exec rm -r {} \; || true
          find out -name '*:*' -exec rm -r {} \; || true

      - name: Upload test logs and reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.os }}-${{  matrix.log-name || matrix.task-name }}.zip
          path: |
            out/coverage
            out/junit
            out/log
            out/test-resources/screenshots
            out/test-resources/settings/logs
            out/userdata/logs
          if-no-files-found: ignore
          retention-days: 90

      - name: Upload test results to Codecov
        if: ${{ !cancelled() && hashFiles('out/junit/*.xml') != '' }}
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true
          directory: out/junit
          name: ${{ matrix.name }}
          # unable to use wildcards yet due to https://github.com/codecov/test-results-action/issues/110
          flags: ${{ matrix.name }},${{ matrix.os }}
          use_oidc: ${{ github.event_name == 'merge_group' || github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

      # - name: Stop services
      #   if: "contains(matrix.os, 'macos')"
      #   # Stopping podman machine is needed or caching it will fail
      #   run: |
      #     command -v podman && {
      #     podman machine stop
      #     while [[ "$(podman machine ls --format '{{.Running}}' \
      #           --noheading || true)" != "false" ]]; do
      #       sleep 1
      #       echo -n .
      #     done
      #     echo .
      #     }
      #   continue-on-error: true

      ## commented out for future use to debug on the GHA node if required
      # - name: Setup tmate session
      #   if: ${{ always() }}
      #   uses: mxschmitt/action-tmate@v3

  check: # This job does nothing and is only used for the branch protection
    if: always()

    needs:
      - build

    permissions: # codecov
      id-token: write
      checks: read

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Source # needed by codecov uploader
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Merge logs into a single archive
        uses: actions/upload-artifact/merge@v4
        with:
          name: logs.zip
          pattern: logs*.zip
          separate-directories: true
          delete-merged: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: logs.zip
          path: .

      - name: Remove invalid files
        if: ${{ always() }}
        run: |
          find . -name '*\?*' -exec rm -r {} \; || true
          find . -name '*"*' -exec rm -r {} \; || true
          find . -name '*:*' -exec rm -r {} \; || true

      - name: Upload als test coverage data [1/4]
        uses: codecov/codecov-action@v5.4.3
        with:
          name: als
          files: ./*/coverage/als/cobertura-coverage.xml
          flags: als
          disable_search: true
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}

      - name: Upload unit test coverage data [2/4]
        uses: codecov/codecov-action@v5.4.3
        with:
          name: unit
          files: ./*/coverage/unit/*cobertura-coverage.xml
          flags: unit
          disable_search: true
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}

      - name: Upload ui test coverage data [3/4]
        uses: codecov/codecov-action@v5.4.3
        with:
          name: ui
          files: ./*/coverage/ui/*cobertura-coverage.xml
          flags: ui
          disable_search: true
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}

      - name: Upload e2e test coverage data [4/4]
        uses: codecov/codecov-action@v5.4.3
        with:
          name: e2e
          files: ./*/coverage/e2e/*cobertura-coverage.xml
          flags: e2e
          disable_search: true
          fail_ci_if_error: true
          use_oidc: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}

      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  publish:
    if: github.ref_type == 'tag' || github.event.inputs.publish == 'true'
    runs-on: ubuntu-latest
    environment: release
    needs:
      - check
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: node post install
        run: |
          corepack enable
          npm config set fund false

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
          node-version-file: .tool-versions

      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: ansible-extension-build-${{ github.event.number || github.ref_name }}.zip

      - name: Attach vsix to Github release
        # cspell: ignore softprops
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: "*.vsix"

      - run: |
          npm exec -- yarn install --immutable
          ls -la *.vsix

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Publish extension to marketplaces
        run: |
          ./tools/helper --publish
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

  publish-npm:
    environment: release
    if: needs.build.outputs.can_release_to_npm == 'true' && (github.ref_type == 'tag' || github.event.inputs.publish == 'true')
    runs-on: ubuntu-latest
    needs:
      - build
      - check
    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v4
        with:
          name: "@ansible-ansible-language-server-build-${{ github.event.number || github.ref_name }}.tgz"

      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
          node-version-file: .tool-versions
          registry-url: "https://registry.npmjs.org"

      - run: npm publish --access public @ansible-ansible-language-server-*.tgz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
