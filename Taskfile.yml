---
# see https://taskfile.dev/#/
version: "3"
includes:
  als:
    taskfile: ./packages/ansible-language-server
    dir: ./packages/ansible-language-server
output: prefixed # do not use "group" due to impact on CI
env:
  # keep in mind that these do *not* override shell vars: https://github.com/go-task/task/issues/1733
  FORCE_COLOR: "true"
  PRE_COMMIT_COLOR: always
  # basically the same thing from .env file:
vars:
  VIRTUAL_ENV:
    sh: echo "${HOME}/.local/share/virtualenvs/vsa"
  XVFB:
    # prefix to add to allow execution of test in headless machines (CI)
    # keep the space after log filename as it is needed.
    sh: bash -c 'if [[ "$OSTYPE" == "linux-gnu"* ]] && command -v xvfb-run >/dev/null; then echo "$(command -v xvfb-run) --auto-servernum -e out/log/xvfb.log "; fi'
tasks:
  default:
    desc: Run most commands
    cmds:
      - task: install
      - task: lint
      - task: package
      - task: docs
      - echo {{.TASK}}
  version:
    cmds:
      - ./tools/helper --version
  setup:
    desc: Install dependencies
    env:
      # used inside test-setup.sh
      OS: "{{OS}}"
      ARCH: "{{ARCH}}"
    cmds:
      - bash ./tools/precheck.sh
      - bash ./tools/test-setup.sh
    sources:
      - .config/requirements.in
      - tools/test-setup.sh
    generates:
      - out/log/manifest-*.yml
      - "{{.PYTHON3}}"
    run: once
    interactive: true
  clean:
    desc: Clean up all files that not tracked by git
    cmds:
      - git clean -dxf
  finish:
    desc: Commands to run at the end
    cmds:
      - tools/dirty.sh
  install:
    cmds:
      - task: setup
      - uv pip install -r .config/requirements.in -c .config/constraints.txt
      - yarn install
    generates:
      - node_modules/.yarn-state.yml
    sources:
      - .config/constraints.txt
      - .config/requirements.in
      - node_modules/.yarn-state.yml
      - package.json
      - packages/*/package.json
      - tools/test-setup.sh
      - yarn.lock
    run: once
    interactive: true
  build:
    desc: Build the project
    cmds:
      - task: install
      - npm exec -- yarn run clean
      - npm exec -- yarn run als-compile
      - npm exec -- yarn run compile
      - npm exec -- tsc -p ./
    sources:
      - Taskfile.yml
      - node_modules/**/*
      - package.json
      - src/**/*
      - test/**/*
      - tsconfig.json
      - webpack.config.ts
      - yarn.lock.json
  code:
    env:
      # https://github.com/microsoft/vscode/issues/82524#issuecomment-1150315756
      NODE_OPTIONS: "--no-deprecation"
    desc: Forced install of extension in your code instance
    cmds:
      - task: package
      - code --force --install-extension *.vsix
  deps:
    desc: Update dependencies
    env:
      VSCODE_VERSION:
        sh: node -p "require('./package.json').engines.vscode"
    cmds:
      - uv pip compile -q --universal --no-annotate --output-file .config/constraints.txt .config/requirements.in
      - task: install
      # upgrade yarn itself
      - yarn set version latest
      # bumps some developments dependencies
      - yarn ncu -u --workspaces -i
      # disabled because it does not work recursively
      # - yarn upgrade-interactive
      # restores a potential update of @types/vscode
      - yarn up "@types/vscode@${VSCODE_VERSION}"
      - yarn dedupe
      # running install after upgrade is needed in order to update the lock file
      - task: shared:install
      # check deps
      - yarn dlx depcheck
      - bash ./tools/precheck.sh
      - "{{.VIRTUAL_ENV}}/bin/python3 -m pre_commit autoupdate"
      - task: lint
      - task: build
    interactive: true
  docs:
    dir: "{{ .TASKFILE_DIR }}"
    desc: Build the documentation
    cmds:
      - task: setup
      # Retrieve possibly missing commits:
      - $(git rev-parse --is-shallow-repository) && git fetch --unshallow > /dev/null || true
      - git fetch --tags --force
      - npm exec -- ts-node packages/ansible-language-server/tools/settings-doc-generator.ts
      - bash -c '. "${VIRTUAL_ENV}/bin/activate" && mkdocs build --strict'
      - defer: { task: finish }
  lint:
    desc: Lint the project
    cmds:
      - task: install
      - task: als:package # to produce the tgz file that can-release is using
      - packages/ansible-language-server/tools/can-release.sh
      - bash ./tools/precheck.sh
      - "{{.VIRTUAL_ENV}}/bin/python3 -m pre_commit run -a"
      - defer: { task: finish }
    silent: true
    sources:
      - "*.*"
      - .config
      - .github
      - .vscode
      - doc
      - examples
      - images
      - src
      - syntaxes
      - test
      - tools
  test:
    # cspell: disable-next-line
    desc: "Run all tests: unit, ui, e2e, als"
    cmds:
      - task: setup
      - task: unit
      - task: ui
      - task: e2e
      - task: als:test
      # .vsix file is no longer needed for executing tests.
      # This is just for making sure that the package step works w/o issues.
      - task: package
      - defer: { task: finish }
    interactive: true
  test-e2e:
    desc: Run e2e tests {{.XVFB}}
    aliases: [e2e]
    cmds:
      - task: package
      - "{{.VIRTUAL_ENV}}/bin/python3 --version"
      - '{{.XVFB}}bash -c ''. "{{.VIRTUAL_ENV}}/bin/activate" &&  COVERAGE=1 MOCK_LIGHTSPEED_API=1 TEST_TYPE=e2e ./tools/test-launcher.sh'''
    interactive: true
  test-ui:
    desc: Run UI tests {{.XVFB}}
    aliases: [ui]
    cmds:
      - task: package
      - "{{.VIRTUAL_ENV}}/bin/python3 --version"
      - ' {{.XVFB}}bash -c ''. "{{.VIRTUAL_ENV}}/bin/activate" && COVERAGE=1 MOCK_LIGHTSPEED_API=1 ./tools/test-launcher.sh'''
    interactive: true
  test-unit:
    desc: Run unit tests with coverage report
    aliases: [unit]
    cmds:
      - npm run unit-tests
    interactive: true
  package:
    desc: Package extension
    sources:
      - CHANGELOG.md
      - README.md
      - package*.json
      - webpack.config.ts
      - tools/helper
      - src/**/*
      - test/**/*
      - media/**/*
    generates:
      - "*.vsix"
    cmds:
      - task: build
      # while not a real dependency, we want to build both all the time:
      - task: als:package
      - ./tools/helper --package
      - defer: { task: finish }
    silent: true
  pr:
    desc: Opens a pull request using gh
    cmds:
      - task: lint
      - gh pr create
    interactive: true
  release:
    desc: Create a new release (used by CI)
    cmds:
      - task: install
      - ./tools/release.sh
    interactive: true
