{
  "activationEvents": [
    "onCommand:extension.ansible-navigator.run",
    "onCommand:extension.ansible-playbook.run",
    "onCommand:extension.ansible.vault",
    "onLanguage:ansible",
    "onLanguage:yaml",
    "onCommand:extension.resync-ansible-inventory",
    "workspaceContains:tox-ansible.ini"
  ],
  "badges": [
    {
      "description": "last-commit",
      "href": "https://github.com/ansible/vscode-ansible",
      "url": "https://img.shields.io/github/last-commit/ansible/vscode-ansible/main"
    },
    {
      "description": "downloads",
      "href": "https://github.com/ansible/vscode-ansible",
      "url": "https://img.shields.io/visual-studio-marketplace/d/redhat.ansible"
    }
  ],
  "bugs": "https://github.com/ansible/vscode-ansible/issues",
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "config": {
    "//": "Oldest version known to work. Be careful updating as it is mentioned in multiple places.",
    "min_vscode": "1.63.0"
  },
  "contributors": [
    {
      "name": "Tomasz Maciążek",
      "email": "tomaciazek@gmail.com"
    },
    {
      "email": "ssbarnea@redhat.com",
      "name": "Sorin Sbarnea"
    },
    {
      "email": "info@ansible.com",
      "name": "Ansible DevTools Team and Community Contributors",
      "url": "https://github.com/ansible/vscode-ansible/graphs/contributors"
    }
  ],
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "ansible-explorer",
          "title": "Ansible",
          "icon": "images/ansible.svg"
        }
      ],
      "panel": [
        {
          "id": "lightspeed-training-match-panel",
          "title": "Ansible",
          "icon": "images/ansible.svg"
        }
      ]
    },
    "views": {
      "ansible-explorer": [
        {
          "id": "ansible-creator",
          "name": "Ansible Creator"
        },
        {
          "id": "lightspeed-explorer-treeview",
          "name": "Ansible Lightspeed Login"
        },
        {
          "id": "lightspeed-feedback-webview",
          "name": "Ansible Lightspeed Feedback",
          "type": "webview"
        }
      ],
      "lightspeed-training-match-panel": [
        {
          "id": "ansible.lightspeed.trainingMatchPanel",
          "name": "Lightspeed Training Matches",
          "type": "webview",
          "contextualTitle": "Ansible",
          "when": "redhat.ansible.lightspeedSuggestionsEnabled",
          "visibility": "visible",
          "retainContextWhenHidden": true
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "ansible-creator",
        "contents": "Welcome to Ansible Creator. Elevate automation with a toolkit for efficient ansible content creation. [Learn more](https://github.com/ansible-community/ansible-creator)\n[Get started](command:ansible.content-creator.menu)"
      },
      {
        "view": "lightspeed-explorer-treeview",
        "contents": "Welcome to Ansible Lightspeed for Visual Studio Code.\nExperience smarter automation using Ansible Lightspeed with watsonx Code Assistant solutions for your playbook. [Learn more](https://www.redhat.com/en/engage/project-wisdom)\nLet's simplify your workflow by connecting VS Code with Ansible Lightspeed.\n[Connect](command:ansible.lightspeed.oauth)",
        "enablement": "lightspeedConnectReady"
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": [
          ".ansible-navigator.json",
          "ansible-navigator.json"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-navigator/main/src/ansible_navigator/data/ansible-navigator.json"
      }
    ],
    "yamlValidation": [
      {
        "fileMatch": [
          "execution-environment.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/execution-environment.json"
      },
      {
        "fileMatch": [
          "meta/runtime.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/meta-runtime.json"
      },
      {
        "fileMatch": [
          ".ansible-navigator.yaml",
          ".ansible-navigator.yml",
          "ansible-navigator.yaml",
          "ansible-navigator.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-navigator/main/src/ansible_navigator/data/ansible-navigator.json"
      },
      {
        "fileMatch": "requirements.yml",
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/requirements.json"
      },
      {
        "fileMatch": "meta/main.yml",
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/meta.json"
      },
      {
        "fileMatch": [
          "playbooks/vars/*.yml",
          "playbooks/vars/*.yaml",
          "vars/*.yml",
          "vars/*.yaml",
          "defaults/*.yml",
          "defaults/*.yaml",
          "host_vars/*.yml",
          "host_vars/*.yaml",
          "group_vars/*.yml",
          "group_vars/*.yaml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/vars.json"
      },
      {
        "fileMatch": [
          ".ansible-lint",
          ".config/ansible-lint.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/ansible-lint-config.json"
      },
      {
        "fileMatch": [
          "molecule/*/molecule.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible-community/molecule/main/src/molecule/data/molecule.json"
      },
      {
        "fileMatch": [
          "galaxy.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-lint/main/src/ansiblelint/schemas/galaxy.json"
      },
      {
        "fileMatch": [
          "rulebooks/*.yaml",
          "rulebooks/*.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-rulebook/main/schema/ruleset_schema.json"
      }
    ],
    "commands": [
      {
        "command": "extension.resync-ansible-inventory",
        "title": "Resync Ansible Inventory"
      },
      {
        "category": "%commands.category.ansible-playbook%",
        "command": "extension.ansible-playbook.run",
        "title": "%commands.title.ansible-playbook%"
      },
      {
        "category": "%commands.category.ansible-playbook%",
        "command": "extension.ansible-navigator.run",
        "title": "%commands.title.ansible-navigator%"
      },
      {
        "category": "%commands.category.ansible-vault%",
        "command": "extension.ansible.vault",
        "title": "%commands.title.ansible-vault%"
      },
      {
        "command": "ansible.python.set.interpreter",
        "title": "Ansible: Set Python Interpreter"
      },
      {
        "command": "ansible.python-settings.open",
        "title": "Ansible: Open Python Settings"
      },
      {
        "command": "ansible.content-creator.menu",
        "title": "Open Ansible Content Creator menu"
      },
      {
        "command": "ansible.content-creator.install",
        "title": "Install Ansible Content Creator"
      },
      {
        "command": "ansible.content-creator.scaffold-ansible-collection",
        "title": "Scaffold Ansible Collection"
      },
      {
        "command": "ansible.content-creator.create",
        "title": "Ansible Content Creator: Create"
      },
      {
        "command": "ansible.content-creator.sample",
        "title": "Ansible Content Creator: Sample"
      },
      {
        "command": "ansible.lightspeed.inlineSuggest.accept",
        "title": "Ansible Lightspeed: Inline suggestion accept"
      },
      {
        "command": "ansible.lightspeed.inlineSuggest.hide",
        "title": "Ansible Lightspeed: Inline suggestion hide"
      },
      {
        "command": "ansible.lightspeed.inlineSuggest.trigger",
        "title": "Ansible Lightspeed: Inline suggestion trigger"
      },
      {
        "command": "ansible.lightspeed.fetchTrainingMatches",
        "title": "Ansible Lightspeed: Fetch Training Matches"
      },
      {
        "command": "ansible.lightspeed.clearTrainingMatches",
        "title": "Ansible Lightspeed: Clear Training Matches"
      },
      {
        "command": "ansible.lightspeed.feedback",
        "title": "Ansible Lightspeed: Feedback"
      },
      {
        "command": "ansible.lightspeed.playbookGeneration",
        "title": "Ansible Lightspeed: Playbook generation",
        "enablement": "redhat.ansible.lightspeedExperimentalEnabled"
      },
      {
        "command": "ansible.lightspeed.thumbsUpDown",
        "title": "Send Lightspeed Thumbs Up/Down Feedback",
        "enablement": "redhat.ansible.lightspeedExperimentalEnabled"
      },
      {
        "command": "ansible.lightspeed.playbookExplanation",
        "title": "Ansible Lightspeed: Playbook explanation",
        "enablement": "redhat.ansible.lightspeedExperimentalEnabled"
      },
      {
        "command": "ansible.lightspeed.enableExperimentalFeatures",
        "title": "Ansible Lightspeed: Enable experimental features"
      }
    ],
    "configuration": [
      {
        "title": "Basic Configurations",
        "properties": {
          "ansible.ansible.path": {
            "scope": "machine-overridable",
            "type": "string",
            "default": "ansible",
            "markdownDescription": "Path to the ansible executable. All subcommands are expected to have adjacent locations.",
            "order": 0
          },
          "ansible.ansible.useFullyQualifiedCollectionNames": {
            "scope": "resource",
            "type": "boolean",
            "default": true,
            "markdownDescription": "Always use fully qualified collection names (FQCN) when inserting a module name. Disabling it will only use FQCNs when necessary.",
            "order": 1
          },
          "ansible.ansible.reuseTerminal": {
            "scope": "machine-overridable",
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enabling this will cause ansible commands run through VS Code to reuse the same Ansible Terminal.",
            "order": 2
          }
        }
      },
      {
        "title": "Python",
        "properties": {
          "ansible.python.interpreterPath": {
            "scope": "machine-overridable",
            "type": "string",
            "default": "",
            "markdownDescription": "Path to the Python interpreter executable. Particularly important if you are using a Python virtual environment. Leave blank to use Python from PATH.",
            "order": 0
          },
          "ansible.python.activationScript": {
            "scope": "machine-overridable",
            "type": "string",
            "default": "",
            "markdownDescription": "Path to the virtual environment activation script. Use only if you have a custom activation script. It will be sourced using bash before executing Ansible commands. When set, the Interpreter Path setting is ignored.",
            "order": 1
          }
        }
      },
      {
        "title": "Ansible Navigator",
        "properties": {
          "ansible.ansibleNavigator.path": {
            "default": "ansible-navigator",
            "markdownDescription": "%configuration.navigate.executablePath%",
            "order": 0,
            "scope": "machine-overridable",
            "type": "string"
          }
        }
      },
      {
        "title": "Completion",
        "properties": {
          "ansible.completion.provideRedirectModules": {
            "scope": "resource",
            "type": "boolean",
            "default": true,
            "markdownDescription": "Toggle redirected module provider when completing modules.",
            "order": 0
          },
          "ansible.completion.provideModuleOptionAliases": {
            "scope": "resource",
            "type": "boolean",
            "default": true,
            "markdownDescription": "Toggle alias provider when completing module options.",
            "order": 1
          }
        }
      },
      {
        "title": "Validation",
        "properties": {
          "ansible.validation.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "If disabled no validation will be performed.",
            "order": 0
          },
          "ansible.validation.lint.enabled": {
            "scope": "resource",
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enables `ansible-lint`. If disabled only `ansible-playbook --syntax-check` will run. Requires `#ansible.validation.enabled#` to be enabled.",
            "order": 1
          },
          "ansible.validation.lint.path": {
            "scope": "machine-overridable",
            "type": "string",
            "default": "ansible-lint",
            "markdownDescription": "Path to the ansible-lint executable.",
            "order": 2
          },
          "ansible.validation.lint.arguments": {
            "scope": "resource",
            "type": "string",
            "default": "",
            "markdownDescription": "Command line arguments to be passed to ansible-lint.",
            "order": 3
          }
        }
      },
      {
        "title": "Execution Environment",
        "properties": {
          "ansible.executionEnvironment.enabled": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable or disable the use of an execution environment.",
            "order": 0
          },
          "ansible.executionEnvironment.containerEngine": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "auto",
              "podman",
              "docker"
            ],
            "default": "auto",
            "markdownDescription": "Specify the container engine (auto=podman then docker).",
            "order": 1
          },
          "ansible.executionEnvironment.containerOptions": {
            "scope": "resource",
            "type": "string",
            "default": "",
            "markdownDescription": "Extra parameters passed to the container engine command example: `--net=host`.",
            "order": 2
          },
          "ansible.executionEnvironment.image": {
            "scope": "resource",
            "type": "string",
            "default": "ghcr.io/ansible/creator-ee:latest",
            "markdownDescription": "Specify the name of the execution environment image.",
            "order": 3
          },
          "ansible.executionEnvironment.pull.arguments": {
            "scope": "resource",
            "type": "string",
            "default": "",
            "markdownDescription": "Specify any additional parameters that should be added to the pull command when pulling an execution environment from a container registry. e.g. `–-tls-verify=false`.",
            "order": 4
          },
          "ansible.executionEnvironment.pull.policy": {
            "scope": "resource",
            "type": "string",
            "enum": [
              "always",
              "missing",
              "never",
              "tag"
            ],
            "default": "missing",
            "markdownDescription": "Specify the image pull policy.\n**always**: Always pull the image when extension is activated or reloaded\n**missing**: Pull if not locally available\n**never**: Never pull the image\n**tag**: If the image tag is `latest`, always pull the image, otherwise pull if not locally available.",
            "order": 5
          },
          "ansible.executionEnvironment.volumeMounts": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "src": {
                  "type": "string",
                  "markdownDescription": "The name of the local volume or path to be mounted within execution environment.",
                  "order": 6
                },
                "dest": {
                  "type": "string",
                  "markdownDescription": "The path where the file or directory are mounted in the container.",
                  "order": 7
                },
                "options": {
                  "type": "string",
                  "markdownDescription": "The field is optional, and is a comma-separated list of options, such as `ro,Z.`",
                  "order": 8
                }
              }
            }
          }
        }
      },
      {
        "title": "Telemetry",
        "properties": {
          "redhat.telemetry.enabled": {
            "type": "boolean",
            "default": null,
            "markdownDescription": "Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).",
            "order": 0,
            "tags": [
              "telemetry",
              "usesOnlineServices"
            ],
            "scope": "window"
          }
        }
      },
      {
        "title": "Ansible Lightspeed",
        "properties": {
          "ansible.lightspeed.enabled": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable Ansible Lightspeed.",
            "order": 0
          },
          "ansible.lightspeed.URL": {
            "scope": "resource",
            "type": "string",
            "default": "https://c.ai.ansible.redhat.com",
            "markdownDescription": "URL for Ansible Lightspeed.",
            "order": 1
          },
          "ansible.lightspeed.suggestions.enabled": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "markdownDescription": "Enable Ansible Lightspeed with watsonx Code Assistant inline suggestions.",
            "order": 2
          },
          "ansible.lightspeed.modelIdOverride": {
            "scope": "resource",
            "type": "string",
            "markdownDescription": "Model ID to override your organization's default model. This setting is only applicable to commercial users with an Ansible Lightspeed seat assignment.",
            "order": 3
          },
          "ansible.lightspeed.disableContentSuggestionHeader": {
            "scope": "resource",
            "type": "boolean",
            "markdownDescription": "Remove indicator that inline suggestion was generated by Ansible Lightspeed when accepting text.",
            "order": 4
          }
        }
      },
      {
        "title": "Language Server",
        "properties": {
          "ansibleServer.trace.server": {
            "type": "string",
            "enum": [
              "off",
              "messages",
              "verbose"
            ],
            "default": "off",
            "markdownDescription": "Traces the communication between editor and the ansible language server.",
            "order": 0
          }
        }
      }
    ],
    "configurationDefaults": {
      "[ansible]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.quickSuggestions": {
          "comments": true,
          "other": true,
          "strings": true
        },
        "editor.autoIndent": "advanced"
      }
    },
    "keybindings": [
      {
        "key": "tab",
        "command": "ansible.lightspeed.inlineSuggest.accept",
        "extensionName": "Ansible",
        "source": "extension",
        "when": "inlineSuggestionVisible && editorLangId == 'ansible'"
      },
      {
        "key": "escape",
        "command": "ansible.lightspeed.inlineSuggest.hide",
        "extensionName": "Ansible",
        "source": "extension",
        "when": "inlineSuggestionVisible && editorLangId == 'ansible'"
      },
      {
        "key": "ctrl+.",
        "command": "ansible.lightspeed.inlineSuggest.trigger",
        "extensionName": "Ansible",
        "source": "extension",
        "when": "config.ansible.lightspeed.enabled && config.ansible.lightspeed.suggestions.enabled && editorTextFocus && !editorHasSelection && !inlineSuggestionVisible && editorLangId == 'ansible'"
      }
    ],
    "languages": [
      {
        "id": "ansible",
        "aliases": [
          "Ansible",
          "ansible"
        ],
        "extensions": [
          ".ansible.yml",
          ".ansible.yaml"
        ],
        "filenamePatterns": [
          "**/playbooks/*.yml",
          "**/playbooks/*.yaml",
          "**/*playbook*.yml",
          "**/*playbook*.yaml"
        ],
        "filenames": [
          "site.yml",
          "site.yaml"
        ],
        "configuration": "./ansible-language-configuration.json"
      },
      {
        "comments": "unfortunately this dummy entry is necessary for embedding to work",
        "id": "ansible-jinja",
        "configuration": "./jinja-language-configuration.json"
      }
    ],
    "menus": {
      "ansible.playbook.run": [
        {
          "command": "extension.ansible-navigator.run"
        },
        {
          "command": "extension.ansible-playbook.run"
        }
      ],
      "editor/context": [
        {
          "group": "2_main@1",
          "submenu": "ansible.playbook.run",
          "when": "isFileSystemResource && editorLangId == ansible"
        },
        {
          "group": "2_main@1",
          "command": "ansible.lightspeed.playbookExplanation",
          "when": "editorTextFocus && redhat.ansible.lightspeedExperimentalEnabled && editorLangId == ansible"
        }
      ],
      "explorer/context": [
        {
          "group": "2_main@1",
          "submenu": "ansible.playbook.run",
          "when": "isFileSystemResource && resourceLangId == ansible"
        }
      ]
    },
    "submenus": [
      {
        "id": "ansible.playbook.run",
        "label": "%submenus.ansible.run-via%"
      }
    ],
    "grammars": [
      {
        "comments": [
          "YAML syntax as base for Ansible",
          "scopeName changed so that we can use it as base for injections"
        ],
        "language": "ansible",
        "scopeName": "source.ansible",
        "path": "./syntaxes/external/YAML.tmLanguage"
      },
      {
        "comments": [
          "Jinja syntax as injection into Ansible YAML",
          "This is so that we do not need to rely on the Jinja extension being installed"
        ],
        "language": "ansible-jinja",
        "scopeName": "source.ansible-jinja",
        "path": "./syntaxes/external/jinja.tmLanguage.json"
      },
      {
        "comments": [
          "Highlighting of Ansible keywords"
        ],
        "path": "./syntaxes/ansible/generated/keywords.tmLanguage",
        "scopeName": "injection.ansible.keywords",
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "Additional Jinja grammars"
        ],
        "path": "./syntaxes/ansible/generated/jinja-extras.tmLanguage",
        "scopeName": "injection.ansible.jinja-extras",
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "Support for Jinja in double curly braces"
        ],
        "path": "./syntaxes/ansible/generated/jinja-braces.tmLanguage",
        "scopeName": "injection.ansible.jinja-braces",
        "embeddedLanguages": {
          "meta.embedded.inline.jinja": "ansible-jinja"
        },
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "Support for Jinja in conditionals"
        ],
        "path": "./syntaxes/ansible/generated/jinja-conditionals.tmLanguage",
        "scopeName": "injection.ansible.jinja-conditionals",
        "embeddedLanguages": {
          "meta.embedded.inline.jinja": "ansible-jinja"
        },
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "The quote escapes implemented in the conditionals injection do not work inside brackets etc.",
          "Support for single quote escapes in Jinja"
        ],
        "path": "./syntaxes/ansible/generated/jinja-single-quote-escape.tmLanguage",
        "scopeName": "injection.ansible.jinja-single-quote-escape",
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "The quote escapes implemented in the conditionals injection do not work inside brackets etc.",
          "Support for double quote escapes in Jinja"
        ],
        "path": "./syntaxes/ansible/generated/jinja-double-quote-escape.tmLanguage",
        "scopeName": "injection.ansible.jinja-double-quote-escape",
        "injectTo": [
          "source.ansible"
        ]
      }
    ],
    "taskDefinitions": [
      {
        "type": "Ansible Tox",
        "properties": {
          "ansible": {
            "type": "string",
            "description": "The testenv to execute"
          }
        }
      }
    ]
  },
  "dependencies": {
    "@ansible/ansible-language-server": "workspace:^",
    "@redhat-developer/vscode-redhat-telemetry": "^0.7.1",
    "@types/ini": "^4.1.0",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "axios": "^1.6.8",
    "express": "^4.19.2",
    "ini": "^4.1.2",
    "marked": "^12.0.1",
    "minimatch": "^9.0.4",
    "start-server-and-test": "^2.0.3",
    "uuid": "^9.0.1",
    "vscode-languageclient": "^9.0.1",
    "vscode-uri": "^3.0.8",
    "yaml": "^2.4.1"
  },
  "description": "Ansible language support",
  "devDependencies": {
    "@eslint/js": "^9.0.0",
    "@types/chai": "^4.3.14",
    "@types/express": "^4.17.21",
    "@types/glob": "^8.1.0",
    "@types/lodash": "^4.17.0",
    "@types/minimatch": "^5.1.2",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.12.7",
    "@types/sinon": "^17.0.3",
    "@types/tmp": "^0.2.6",
    "@types/uuid": "^9.0.8",
    "@types/vscode": "^1.85.0",
    "@types/vscode-webview": "^1.57.5",
    "@typescript-eslint/eslint-plugin": "^7.6.0",
    "@typescript-eslint/parser": "^7.6.0",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^2.25.0",
    "axios": "^1.6.8",
    "chai": "^4.4.1",
    "copyfiles": "^2.4.1",
    "depcheck": "^1.4.7",
    "eslint": "^9.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-formatter-gha": "^1.4.3",
    "eslint-formatter-unix": "^8.40.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-tsdoc": "^0.2.17",
    "find-process": "^1.4.7",
    "glob": "^10.3.12",
    "globals": "^15.0.0",
    "lodash": "^4.17.21",
    "mocha": "^10.4.0",
    "mochawesome": "^7.1.3",
    "mochawesome-report-generator": "^6.2.0",
    "nyc": "^15.1.0",
    "ovsx": "^0.9.0",
    "prettier": "^3.2.5",
    "react": "^18.2.0",
    "rimraf": "^5.0.5",
    "sinon": "^17.0.1",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.4.5",
    "typescript-eslint": "^7.6.0",
    "vscode-extension-tester": "^8.0.2",
    "warnings-to-errors-webpack-plugin": "^2.3.0",
    "webpack": "^5.91.0",
    "webpack-cli": "^5.1.4",
    "yarn-audit-fix": "^10.0.7"
  },
  "displayName": "Ansible",
  "engineStrict": true,
  "engines": {
    "//": "node version affects only development, it does not affect VS Code runtime",
    "node": ">=16.0",
    "npm": "\n\nERROR: Please use yarn instead of npm for this repository.!!!\n\n",
    "vscode": "^1.85.0",
    "yarn": ">=3.2.1"
  },
  "extensionDependencies": [
    "ms-python.python",
    "redhat.vscode-yaml"
  ],
  "icon": "images/logo.png",
  "keywords": [
    "ansible",
    "yaml",
    "autocompletion",
    "validation"
  ],
  "license": "MIT",
  "main": "./out/client/src/extension.js",
  "name": "ansible",
  "publisher": "redhat",
  "qna": false,
  "repository": {
    "type": "git",
    "url": "https://github.com/ansible/vscode-ansible.git"
  },
  "scripts": {
    "compile": "tsc -b && copyfiles -u 4 'node_modules/@ansible/ansible-language-server/out/server/**/*' out",
    "compile-withserver": "tsc -b && tsc -p ../ansible-language-server --outDir out/server && ln -f -s ${PWD}/../ansible-language-server/node_modules out/server/node_modules",
    "package": "./tools/package.sh",
    "preinstall": "",
    "pretest": "yarn run compile",
    "unit-tests": "nyc mocha --recursive test/units",
    "test-ui": "yarn run test-ui-current && yarn run test-ui-oldest",
    "_test-ui": "extest get-vscode -c ${CODE_VERSION} -s out/test-resources && extest get-chromedriver -c ${CODE_VERSION} -s out/test-resources && extest install-vsix -f ansible-*.vsix -e out/ext -s out/test-resources && extest install-from-marketplace redhat.vscode-yaml ms-python.python -e out/ext -s out/test-resources && extest run-tests -s out/test-resources -e out/ext --code_settings test/testFixtures/settings.json out/client/test/ui-test/allTestsSuite.js",
    "test-ui-current": "CODE_VERSION='max' yarn _test-ui",
    "test-ui-oldest": "CODE_VERSION='min' yarn _test-ui",
    "test-ui-with-mock-lightspeed-server": "TEST_LIGHTSPEED_URL='http://127.0.0.1:3000' ./tools/run-ui-test-with-mock-lightspeed-server.sh",
    "vscode-prepublish": "yarn run webpack",
    "watch": "tsc -b -w",
    "watch-server": "tsc -p ../ansible-language-server --outDir out/server -w",
    "webpack": "yarn run clean && yarn run compile && webpack --mode production --config ./webpack.config.ts",
    "webpack-dev": "yarn run clean && webpack --mode development --config ./webpack.config.ts",
    "webpack:watch": "webpack --mode development --config ./webpack.config.ts --watch",
    "clean": "rimraf out/client out/server out/tsconfig.tsbuildinfo coverage .nyc_output",
    "test-compile": "yarn run clean && yarn run compile && tsc -p ./",
    "test-compile-withserver": "yarn run clean && yarn run compile-withserver && tsc -p ./",
    "test-e2e": "yarn run test-compile && node ./out/client/test/testRunner",
    "coverage-e2e": "COVERAGE=1 yarn run test-e2e",
    "test-e2e-withserver": "yarn run test-compile-withserver && node ./out/client/test/testRunner",
    "coverage-e2e-withserver": "COVERAGE=1 yarn run test-e2e-withserver",
    "mock-lightspeed-server": "DEBUG='express:*' node ./out/client/test/mockLightspeedServer/server.js",
    "kill-mock-lightspeed-server": "pkill -f mockLightspeedServer/server.js",
    "_coverage-all": "./tools/coverage-all.sh",
    "coverage-all": "TEST_LIGHTSPEED_URL='http://127.0.0.1:3000' yarn _coverage-all",
    "als-compile": "yarn workspace @ansible/ansible-language-server compile"
  },
  "version": "24.4.0",
  "packageManager": "yarn@4.1.1",
  "vsce": {
    "dependencies": false,
    "yarn": false
  },
  "workspaces": [
    "packages/*"
  ]
}
