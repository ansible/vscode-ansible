{
  "activationEvents": [
    "onCommand:extension.ansible-navigator.run",
    "onCommand:extension.ansible-playbook.run",
    "onCommand:extension.ansible.vault",
    "onLanguage:ansible"
  ],
  "badges": [
    {
      "description": "Ansible language support",
      "href": "https://marketplace.visualstudio.com/items?itemName=redhat.ansible",
      "url": "https://vsmarketplacebadge.apphb.com/version/redhat.ansible.svg"
    },
    {
      "description": "CI/CD Pipeline",
      "href": "https://github.com/ansible/vscode-ansible/actions/workflows/ci.yaml",
      "url": "https://img.shields.io/github/workflow/status/ansible/vscode-ansible/ci.png"
    }
  ],
  "bugs": "https://github.com/ansible/vscode-ansible/issues",
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "config": {
    "//": "Oldest version known to work. Be careful updating as it is mentioned in multiple places.",
    "min_vscode": "1.48.0"
  },
  "contributors": [
    {
      "name": "Tomasz Maciążek",
      "email": "tomaciazek@gmail.com"
    },
    {
      "email": "ssbarnea@redhat.com",
      "name": "Sorin Sbarnea"
    },
    {
      "email": "info@ansible.com",
      "name": "Ansible DevTools Team and Community Contributors",
      "url": "https://github.com/ansible/vscode-ansible/graphs/contributors"
    }
  ],
  "contributes": {
    "jsonValidation": [
      {
        "fileMatch": [
          ".ansible-navigator.json",
          "ansible-navigator.json"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-navigator/main/src/ansible_navigator/data/ansible-navigator.json"
      }
    ],
    "yamlValidation": [
      {
        "fileMatch": [
          "execution-environment.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-ee.json"
      },
      {
        "fileMatch": [
          "meta/runtime.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-meta-runtime.json"
      },
      {
        "fileMatch": [
          ".ansible-navigator.yaml",
          ".ansible-navigator.yml",
          "ansible-navigator.yaml",
          "ansible-navigator.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/ansible-navigator/main/src/ansible_navigator/data/ansible-navigator.json"
      },
      {
        "fileMatch": "requirements.yml",
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-requirements.json"
      },
      {
        "fileMatch": "meta/main.yml",
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-meta.json"
      },
      {
        "fileMatch": [
          "playbooks/vars/*.yml",
          "playbooks/vars/*.yaml",
          "vars/*.yml",
          "vars/*.yaml",
          "defaults/*.yml",
          "defaults/*.yaml",
          "host_vars/*.yml",
          "host_vars/*.yaml",
          "group_vars/*.yml",
          "group_vars/*.yaml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-vars.json"
      },
      {
        "fileMatch": [
          ".ansible-lint"
        ],
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-lint.json"
      },
      {
        "fileMatch": [
          "molecule/*/molecule.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/molecule.json"
      },
      {
        "fileMatch": [
          "galaxy.yml"
        ],
        "url": "https://raw.githubusercontent.com/ansible/schemas/main/f/ansible-galaxy.json"
      }
    ],
    "commands": [
      {
        "category": "%commands.category.ansible-playbook%",
        "command": "extension.ansible-playbook.run",
        "title": "%commands.title.ansible-playbook%"
      },
      {
        "category": "%commands.category.ansible-playbook%",
        "command": "extension.ansible-navigator.run",
        "title": "%commands.title.ansible-navigator%"
      },
      {
        "category": "%commands.category.ansible-vault%",
        "command": "extension.ansible.vault",
        "title": "%commands.title.ansible-vault%"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Ansible",
      "properties": {
        "ansible.ansible.path": {
          "scope": "machine-overridable",
          "type": "string",
          "default": "ansible",
          "description": "Path to the ansible executable. All subcommands are expected to have adjacent locations."
        },
        "ansible.ansible.useFullyQualifiedCollectionNames": {
          "scope": "resource",
          "type": "boolean",
          "default": true,
          "description": "Always use fully qualified collection names (FQCN) when inserting a module name. Disabling it will only use FQCNs when necessary."
        },
        "ansible.ansibleLint.arguments": {
          "scope": "resource",
          "type": "string",
          "default": "",
          "description": "Command line arguments to be passed to ansible-lint."
        },
        "ansible.ansibleLint.enabled": {
          "scope": "resource",
          "type": "boolean",
          "default": true,
          "description": "Enable linting with ansible-lint on document open/save."
        },
        "ansible.ansibleLint.path": {
          "scope": "machine-overridable",
          "type": "string",
          "default": "ansible-lint",
          "description": "Path to the ansible-lint executable."
        },
        "ansible.ansibleNavigator.path": {
          "default": "ansible-navigator",
          "description": "%configuration.navigate.executablePath%",
          "scope": "machine-overridable",
          "type": "string"
        },
        "ansible.executionEnvironment.containerEngine": {
          "scope": "resource",
          "type": "string",
          "enum": [
            "auto",
            "podman",
            "docker"
          ],
          "default": "auto",
          "description": "Specify the container engine (auto=podman then docker)."
        },
        "ansible.executionEnvironment.enabled": {
          "scope": "resource",
          "type": "boolean",
          "default": false,
          "description": "Enable or disable the use of an execution environment."
        },
        "ansible.executionEnvironment.image": {
          "scope": "resource",
          "type": "string",
          "default": "quay.io/ansible/creator-ee:latest",
          "description": "Specify the name of the execution environment image."
        },
        "ansible.executionEnvironment.containerOptions": {
          "scope": "resource",
          "type": "string",
          "default": "",
          "description": "Extra parameters passed to the container engine command example: '--net=host'"
        },
        "ansible.executionEnvironment.pull.arguments": {
          "scope": "resource",
          "type": "string",
          "default": "",
          "description": "Specify any additional parameters that should be added to the pull command when pulling an execution environment from a container registry. e.g. '–-tls-verify=false'"
        },
        "ansible.executionEnvironment.pull.policy": {
          "scope": "resource",
          "type": "string",
          "enum": [
            "always",
            "missing",
            "never",
            "tag"
          ],
          "default": "missing",
          "description": "Specify the image pull policy.\nalways: Always pull the image when extension is activated or reloaded\nmissing: Pull if not locally available\nnever: Never pull the image\ntag: If the image tag is 'latest', always pull the image, otherwise pull if not locally available"
        },
        "ansible.executionEnvironment.volumeMounts": {
          "scope": "resource",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "src": {
                "type": "string",
                "description": "The name of the local volume or path to be mounted within execution environment."
              },
              "dest": {
                "type": "string",
                "description": "The path where the file or directory are mounted in the container."
              },
              "options": {
                "type": "string",
                "description": "The field is optional, and is a comma-separated list of options, such as ro,Z"
              }
            }
          }
        },
        "ansible.python.activationScript": {
          "scope": "machine-overridable",
          "type": "string",
          "default": "",
          "description": "Path to the virtual environment activation script. Use only if you have a custom activation script. It will be sourced using bash before executing Ansible commands. When set, the Interpreter Path setting is ignored."
        },
        "ansible.python.interpreterPath": {
          "scope": "machine-overridable",
          "type": "string",
          "default": "python3",
          "description": "Path to the Python interpreter executable. Particularly important if you are using a Python virtual environment. Leave blank to use Python from PATH."
        },
        "ansibleServer.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VSCode and the ansible language server."
        }
      }
    },
    "configurationDefaults": {
      "[ansible]": {
        "editor.detectIndentation": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.quickSuggestions": {
          "comments": true,
          "other": true,
          "strings": true
        }
      }
    },
    "languages": [
      {
        "id": "ansible",
        "aliases": [
          "Ansible",
          "ansible"
        ],
        "extensions": [
          ".yml",
          ".yaml"
        ],
        "configuration": "./ansible-language-configuration.json"
      },
      {
        "comments": "unfortunately this dummy entry is necessary for embedding to work",
        "id": "ansible-jinja",
        "configuration": "./jinja-language-configuration.json"
      }
    ],
    "menus": {
      "ansible.playbook.run": [
        {
          "command": "extension.ansible-navigator.run"
        },
        {
          "command": "extension.ansible-playbook.run"
        }
      ],
      "editor/context": [
        {
          "group": "2_main@1",
          "submenu": "ansible.playbook.run",
          "when": "isFileSystemResource && editorLangId == ansible"
        }
      ],
      "explorer/context": [
        {
          "group": "2_main@1",
          "submenu": "ansible.playbook.run",
          "when": "isFileSystemResource && resourceLangId == ansible"
        }
      ]
    },
    "submenus": [
      {
        "id": "ansible.playbook.run",
        "label": "%submenus.ansible.run-via%"
      }
    ],
    "grammars": [
      {
        "comments": [
          "YAML syntax as base for Ansible",
          "scopeName changed so that we can use it as base for injections"
        ],
        "language": "ansible",
        "scopeName": "source.ansible",
        "path": "./syntaxes/external/YAML.tmLanguage"
      },
      {
        "comments": [
          "Jinja syntax as injection into Ansible YAML",
          "This is so that we do not need to rely on the Jinja extension being installed"
        ],
        "language": "ansible-jinja",
        "scopeName": "source.ansible-jinja",
        "path": "./syntaxes/external/jinja.tmLanguage.json"
      },
      {
        "comments": [
          "Highlighting of Ansible keywords"
        ],
        "path": "./syntaxes/ansible/generated/keywords.tmLanguage",
        "scopeName": "injection.ansible.keywords",
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "Additional Jinja grammars"
        ],
        "path": "./syntaxes/ansible/generated/jinja-extras.tmLanguage",
        "scopeName": "injection.ansible.jinja-extras",
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "Support for Jinja in double curly braces"
        ],
        "path": "./syntaxes/ansible/generated/jinja-braces.tmLanguage",
        "scopeName": "injection.ansible.jinja-braces",
        "embeddedLanguages": {
          "meta.embedded.inline.jinja": "ansible-jinja"
        },
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "Support for Jinja in conditionals"
        ],
        "path": "./syntaxes/ansible/generated/jinja-conditionals.tmLanguage",
        "scopeName": "injection.ansible.jinja-conditionals",
        "embeddedLanguages": {
          "meta.embedded.inline.jinja": "ansible-jinja"
        },
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "The quote escapes implemented in the conditionals injection do not work inside brackets etc.",
          "Support for single quote escapes in Jinja"
        ],
        "path": "./syntaxes/ansible/generated/jinja-single-quote-escape.tmLanguage",
        "scopeName": "injection.ansible.jinja-single-quote-escape",
        "injectTo": [
          "source.ansible"
        ]
      },
      {
        "comments": [
          "The quote escapes implemented in the conditionals injection do not work inside brackets etc.",
          "Support for double quote escapes in Jinja"
        ],
        "path": "./syntaxes/ansible/generated/jinja-double-quote-escape.tmLanguage",
        "scopeName": "injection.ansible.jinja-double-quote-escape",
        "injectTo": [
          "source.ansible"
        ]
      }
    ]
  },
  "dependencies": {
    "@ansible/ansible-language-server": "^0.7.1",
    "@types/ini": "^1.3.31",
    "ini": "^3.0.0",
    "untildify": "^4.0.0",
    "vscode-languageclient": "^7.0.0"
  },
  "description": "Ansible language support",
  "devDependencies": {
    "@types/chai": "^4.3.0",
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "^17.0.23",
    "@types/vscode": "^1.48.0",
    "@typescript-eslint/eslint-plugin": "^5.19.0",
    "@typescript-eslint/parser": "^5.19.0",
    "chai": "^4.3.6",
    "copyfiles": "^2.4.1",
    "eslint": "^8.13.0",
    "eslint-config-prettier": "^8.5.0",
    "mocha": "^9.2.2",
    "mochawesome": "^7.1.3",
    "mochawesome-report-generator": "^6.2.0",
    "npm-check-updates": "^12.5.8",
    "rimraf": "^3.0.2",
    "standard-version": "^9.3.2",
    "ts-loader": "^9.2.8",
    "ts-node": "^10.7.0",
    "typescript": "^4.6.3",
    "vsce": "^2.7.0",
    "vscode-extension-tester": "^4.2.4",
    "vscode-test": "^1.6.1",
    "webpack": "^5.72.0",
    "webpack-cli": "^4.9.2"
  },
  "displayName": "Ansible",
  "engineStrict": true,
  "engines": {
    "//": "node version affects only development, it does not affect vscode runtime",
    "node": ">=16.0",
    "npm": ">=7.12.1",
    "vscode": "^1.48.0",
    "yarn": "\n\nERROR: Please use npm, yarn is not supported in this repository!!!\n\n"
  },
  "extensionDependencies": [
    "ms-python.python",
    "redhat.vscode-yaml"
  ],
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "icon": "images/logo.png",
  "keywords": [
    "ansible",
    "yaml",
    "autocompletion",
    "validation"
  ],
  "license": "MIT",
  "main": "./out/client/src/extension.js",
  "name": "ansible",
  "preview": true,
  "publisher": "redhat",
  "qna": false,
  "repository": {
    "type": "git",
    "url": "https://github.com/ansible/vscode-ansible.git"
  },
  "scripts": {
    "code": "npm run package && code --force --install-extension *.vsix",
    "compile": "tsc -b && copyfiles -u 4 'node_modules/@ansible/ansible-language-server/out/server/**/*' out",
    "compile-withserver": "tsc -b && tsc -p ../ansible-language-server --outDir out/server && ln -f -s ${PWD}/../ansible-language-server/node_modules out/server/node_modules",
    "lint": "pre-commit run -a",
    "package": "npm ci && npm run webpack && rimraf *.vsix && vsce package && vsce ls",
    "//vsce": "used in ansible-language-server repo CI to package the extension with unreleased version of ansible-language-server",
    "vsce": "rimraf *.vsix && vsce package && vsce ls",
    "pretest": "npm run compile",
    "sanity": "npm ci && npm install --ignore-scripts && ncu upgrade '@ansible/ansible-language-server@latest' && npm version --allow-same-version --no-commit-hooks --no-git-tag-version $npm_package_version",
    "test-ui": "npm run test-ui-current && npm run test-ui-oldest",
    "test-ui-current": "extest setup-and-run -e out/ext -i -s out/test-resources out/client/test/ui-test/allTestsSuite.js",
    "test-ui-oldest": "extest setup-and-run -e out/ext -c 1.48.0 -s out/test-resources-oldest -i -u out/client/test/ui-test/allTestsSuite.js",
    "vscode-prepublish": "npm run webpack",
    "watch": "tsc -b -w",
    "watch-server": "tsc -p ../ansible-language-server --outDir out/server -w",
    "webpack": "npm run clean && npm run compile && webpack --mode production --config ./webpack.config.js",
    "webpack-dev": "npm run clean && webpack --mode development --config ./webpack.config.js",
    "webpack-watch": "webpack --mode development --config ./webpack.config.js --watch",
    "clean": "rimraf out/client out/server out/tsconfig.tsbuildinfo",
    "test-compile": "npm run clean && npm run compile && tsc -p ./",
    "test-compile-withserver": "npm run clean && npm run compile-withserver && tsc -p ./",
    "test-e2e": "npm run test-compile && node ./out/client/test/testRunner",
    "test-e2e-withserver": "npm run test-compile-withserver && node ./out/client/test/testRunner"
  },
  "version": "0.9.0"
}
